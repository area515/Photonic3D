
buildscript {
  dependencies {
    configurations.classpath.exclude group: 'xerces', module: 'xercesImpl'
  }
}

// PROJECT CONFIG
// --------------
plugins {
  id "application"
  id "eclipse"
  id "java"
  id "com.github.breadmoirai.github-release" version "2.2.12"
  id 'org.ajoberstar.grgit' version '1.5.0'
  id 'org.ajoberstar.github-pages' version '1.5.0'
  id 'com.google.osdetector' version '1.4.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

/*java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(8))
  }
}*/

configurations {
  doclet
}

repositories {
  maven {
    url 'http://4thline.org/m2'
    allowInsecureProtocol true
  }
  mavenCentral()
}

dependencies {
  implementation('io.swagger:swagger-jaxrs:1.5.8') {
    exclude module: 'jsr311-api'
  }

  implementation 'commons-beanutils:commons-beanutils:1.9.3'
  implementation 'com.pi4j:pi4j-core:1.1'
  implementation 'net.java.dev.jna:jna:5.5.0'
  implementation 'org.apache.xmlgraphics:xmlgraphics-commons:1.5'
  implementation 'org.apache.xmlgraphics:batik-transcoder:1.8'
  implementation 'com.sun.mail:javax.mail:1.5.5'
  implementation 'se.sawano.java:alphanumeric-comparator:1.4.1'
  implementation 'org.fourthline.cling:cling-core:2.0.1'
  implementation 'org.fourthline.cling:cling-support:2.0.1'
  implementation 'org.apache.httpcomponents:httpclient:4.3.3'

  implementation 'org.jmonkeyengine:jme3-core:3.1.0-beta1'
  implementation 'org.apache.commons:commons-math3:3.6.1'
  implementation 'commons-cli:commons-cli:1.2'
  implementation 'commons-codec:commons-codec:1.5'
  implementation 'commons-io:commons-io:2.4'
  implementation 'commons-logging:commons-logging:1.2'

  implementation 'org.freemarker:freemarker:2.3.23'

  implementation 'com.google.guava:guava:19.0'

  implementation 'org.eclipse.jetty:jetty-server:9.3.7.v20160115'
  implementation 'org.eclipse.jetty:jetty-servlet:9.3.7.v20160115'
  implementation 'org.eclipse.jetty:jetty-rewrite:9.3.7.v20160115'
  implementation 'org.jboss.weld.servlet:weld-servlet-core:2.4.1.Final'
  implementation 'org.eclipse.jetty.websocket:javax-websocket-server-impl:9.3.7.v20160115'

  implementation 'com.jcraft:jsch:0.1.53'
  implementation 'org.scream3r:jssc:2.8.0'
  implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.2'
  implementation 'org.apache.logging.log4j:log4j-api:2.8.2'
  implementation 'org.apache.logging.log4j:log4j-core:2.8.2'

  implementation 'org.apache.james:apache-mime4j:0.6.1'

  implementation 'org.jboss.resteasy:jaxrs-api:3.0.9.Final'
  implementation 'org.jboss.resteasy:resteasy-jaxrs:3.0.9.Final'
  implementation 'org.jboss.resteasy:resteasy-jackson2-provider:3.0.9.Final'
  implementation('org.jboss.resteasy:resteasy-multipart-provider:3.0.9.Final') {
    exclude module: 'mail'
  }

  implementation 'com.fasterxml.jackson.core:jackson-core:2.4.5'
  implementation 'com.fasterxml.jackson.core:jackson-annotations:2.4.5'
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.4.5'

  implementation 'org.powermock:powermock-module-junit4:1.6.4'
  implementation 'org.powermock:powermock-api-mockito:1.6.4'

  implementation 'junit:junit:4.12'

  implementation fileTree(dir: 'libs', include: '**/*.jar')
  implementation files('conf')

  doclet 'com.tenxerconsulting:swagger-doclet:1.1.3'
  doclet 'javax.ws.rs:javax.ws.rs-api:2.0'
  //doclet(
  //  [group: 'com.tenxerconsulting', name: 'swagger-doclet', version: '1.1.3'],
  //  [group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0']
  //)
}

sourceSets {
  // Source and test files are in src/main and src/test per standard configuration
}

compileJava {
  options.compilerArgs << '-XDignore.symbol.file'
  options.fork = true
  //options.forkOptions.executable = 'javac'
}

eclipse {
  classpath {
    defaultOutputDir = file('srcbin')
  }
}

// PROJECT SETUP SCRIPT
// --------------------
import org.ajoberstar.grgit.*;
import org.gradle.internal.os.OperatingSystem;

ant.importBuild 'build.xml';

grgit = Grgit.open(project.file('..'));
def commitVersion = "unknown";

mainClassName = "org.area515.resinprinter.server.Main"
applicationDefaultJvmArgs = ["-Dlog4j.configurationFile=conf/eclipselog4j2.properties"]
applicationName = 'photonic3d'
jar.archiveFileName = 'photonic3d.jar'

// TASK CONFIG
// -----------
test {
  includes = ['**/*FullTestSuite*']
  forkEvery = 5
  maxHeapSize = "1G"
  testLogging {
    events "failed"
    showStackTraces true
    showExceptions true
    exceptionFormat "full"
  }
}

javadoc {
  failOnError = false
}

githubPages {

  pages {
    from file("${project.docsDir}")

    into "docs"
  }
}

// TASK EXECUTION DEFS
// -------------------
task repoVersion()  {
    doLast {
      /*commitVersion = grgit.describe()

 	if (commitVersion == null) {*/
    	commitVersion = currentCommitHash();
  	//}

 	ant.properties['repo.version'] = commitVersion

  	println("Git Commit Description: "+commitVersion)
  }
};

task testJar(type: Jar) {
  archiveBaseName = "photonic3d"
  classifier = "tests"
  from sourceSets.test.output
}

task preDist(dependsOn: ['installDist', 'repoVersion']) {
}

task dist(dependsOn: ['preDist', 'BuildCWH']) {
};

task setupRemote  {
    doLast {
  		def matchingRemotes = grgit.remote.list().findAll({it.name==releaseRepoRemoteName});
  		if (matchingRemotes.size < 1) {
    		throw new GradleException("No configured remotes match the the remote named: ${releaseRepoRemoteName}");
  		}

  		def remote = matchingRemotes;
  		//def releaseUrl = "https://github.com/${github.owner}/${github.repo}"
  		def releaseUrl = remote.url;
  		println("Releasing to: "+releaseUrl);

  		def repoMatch = (releaseUrl =~ /github\.com[\/\:]([^\/]+)\/([^\/]*?)(\.git)?.?$/);

  		def repoOwner = repoMatch[0][1];
  		def repoName = repoMatch[0][2];

  		println("Repo Owner: ${repoOwner} / Repo Name: ${repoName}");

  		githubRelease.owner = repoOwner;
 		githubRelease.repo = repoName;
        githubRelease.draft = true;
        githubRelease.prerelease = true;
        project.ext.set("owner", repoOwner)
        project.ext.set("repo", repoName)
  }
}


task setupRelease(dependsOn: ['setupRemote'])   {
    doLast {
  grgit = Grgit.open(project.file('..'), new Credentials(username: project.ext.owner, password: releaseRepoToken));

  if (releaseRepoToken.equals('GITHUB_API_TOKEN')) {
    throw new GradleException("Please setup your gradle.properties for GitHub Releases")
  }
  def status = grgit.status();
  println("----------------------------------------------")
  println("Description of current commit: "+grgit.describe())
  println("UNCOMMITTED STAGED CHANGES: "+status.staged)
  println("UNCOMMITTED UNSTAGED CHANGES: "+status.unstaged)
  println("----------------------------------------------")

  def tagName = "$System.env.tagName";

  println("Dry-Run Git Push to ${releaseRepoRemoteName}:")
  grgit.push(dryRun: true, remote: releaseRepoRemoteName);
  println("----------------------------------------------")
  println("Check the above git push dry run to ensure that your push will succeed!");
  ant.input(message: "Press <return> to continue...")

  if (tagName == "${null}") {
    println("Recommended development release tag: ${project.ext.owner}-${currentCommitHash()}")
    ant.input(message: "Enter the tag to create for this release > ", addproperty: "tagName")
    tagName = ant.tagName
  }

  githubRelease.tagName = tagName;
  grgit.tag.add(name: tagName);
  println("Added tag: ${tagName}");
  }
}

task releaseDist (dependsOn: ['dist'])   {
    doLast {
  githubRelease.assets = fileTree(dir: '.', include: '*.zip', exclude: 'cwh-0.298.zip') as List;
  if (githubRelease.assets.size() < 1) {
    throw new GradleException("There are no zip files to release in the project directory.")
  }
  println("Releasing the following files: "+githubRelease.assets);
  }
}

task fullRelease(dependsOn: ['setupRelease', 'githubRelease'])   {
    doLast {
  grgit.push(tags: true, remote: releaseRepoRemoteName);
  }
}

task runSliceBrowser(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  mainClass = "org.area515.resinprinter.slice.SliceBrowser"
}

task apidoc(type: Javadoc) {
  source = sourceSets.main.allJava
  destinationDir = file("${project.docsDir}/apidoc")
  options.docletpath = configurations.doclet.files.asType(List)
  options.doclet = "com.tenxerconsulting.swagger.doclet.ServiceDoclet"
  options.addStringOption("apiVersion", "1")
  options.addStringOption("docBasePath", "/apidoc")
  options.addStringOption("apiBasePath", "/services")
  options.addStringOption("includeResourcePrefixes", "org.area515.resinprinter.services")
}

run.doFirst {
  // c9.io only exposes some ports to forward to the browser, if this is set,
  // override the listen port to use it
  def c9Port = "$System.env.C9_PORT";
  if (c9Port != "${null}") {
    applicationDefaultJvmArgs += ["-DoverrideHostPort=${c9Port}"]
  }
}

clean.doFirst {
  // Additions to the built-in clean
  delete "srcbin", "testbin", "cwh.log"
  delete fileTree(dir: '.', include: '*.zip', exclude: 'cwh-0.298.zip')
  delete fileTree(dir: '.', include: 'cwh*.log.gz')
}

prepareGhPages.doFirst {
  githubPages.credentials = new org.ajoberstar.gradle.git.auth.BasicPasswordCredentials(releaseRepoUser, releaseRepoToken)
}

// PROJECT POST-SETUP SCRIPT
// -------------------------
dist.mustRunAfter setupRelease
BuildCWH.mustRunAfter preDist
publishGhPages.dependsOn javadoc
publishGhPages.dependsOn apidoc
tasks.named('githubRelease').configure {
    dependsOn setupRelease
    dependsOn releaseDist
}

applicationDistribution.from(testJar) {
  into "lib"
}

// UTILITY FUNCTIONS
// -----------------

String currentCommitHash() {
  def history = grgit.log(maxCommits: 1)
  return history[0].id.take(7)
}

githubRelease {
    authorization releaseRepoToken
    token releaseRepoToken // This is your personal access token with Repo permissions
                         // You get this from your user settings > developer settings > Personal Access Tokens
    //owner "WesGilster" // default is the last part of your group. Eg group: "com.github.breadmoirai" => owner: "breadmoirai"
    //repo "Photonic3D" // by default this is set to your project name
	//tagName "cwh-${repoOwner}-${currentCommitHash()}" // by default this is set to "v${project.version}"
    //targetCommitish "master" // by default this is set to "master"
    //releaseName "WesGilster" // Release title, by default this is the same as the tagName
    //body "" // by default this is empty
    draft true // by default this is false
    prerelease true // by default this is false
    //releaseAssets jar.destinationDir.listFiles // this points to which files you want to upload as assets with your release

    overwrite false // by default false; if set to true, will delete an existing release with the same tag and name
    dryRun false // by default false; you can use this to see what actions would be taken without making a release
    //apiEndpoint "https://api.github.com" // should only change for github enterprise users
    client // This is the okhttp client used for http requests
}